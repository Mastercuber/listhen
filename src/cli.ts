import { WatchOptions } from "node:fs";
import { defineCommand, runMain as _runMain } from "citty";
import { isAbsolute } from "pathe";
import { name, description, version } from "../package.json";
import { listen } from "./listen";
import { listenAndWatch, DevServerOptions, createDevServer } from "./server";
import type { ListenOptions } from "./types";
import { mergeHttpsOptions } from "./_utils";

export const main = defineCommand({
  meta: {
    name,
    description,
    version,
  },
  args: {
    cwd: {
      type: "string",
      description: "Current working directory",
    },
    entry: {
      type: "positional",
      description: "Listener entry file (./app.ts)",
      required: true,
    },
    port: {
      type: "string",
      description:
        "Port to listen on (use PORT environment variable to override)",
    },
    host: {
      type: "string",
      description:
        "Host to listen on (use HOST environment variable to override)",
    },
    clipboard: {
      type: "boolean",
      description: "Copy the URL to the clipboard",
      default: false,
    },
    open: {
      type: "boolean",
      description: "Open the URL in the browser",
      default: false,
    },
    baseURL: {
      type: "string",
      description: "Base URL to use",
    },
    name: {
      type: "string",
      description: "Name to use in the banner",
    },
    https: {
      type: "boolean",
      description: "Enable HTTPS",
      default: false,
    },
    tlsCert: {
      type: "string",
      description: "Path to TLS certificate used with HTTPS in PEM format",
    },
    tlsKey: {
      type: "string",
      description: "Path to TLS key used with HTTPS in PEM format",
    },
    keystore: {
      type: "string",
      description:
        "Path to PKCS#12 (.p12/.pfx) keystore containing a TLS certificate and Key",
    },
    passphrase: {
      type: "string",
      description: "Passphrase used for TLS key or keystore",
    },
    validity: {
      type: "string",
      description:
        "Validity in days of the autogenerated TLS certificate (https: true)",
    },
    domains: {
      type: "string",
      description:
        "Comma seperated list of domains and IPs, the autogenerated certificate should be valid for (https: true)",
    },
    watch: {
      type: "boolean",
      description: "Watch for changes",
      alias: "w",
      default: false,
    },
    publicURL: {
      type: "string",
      description: "Displayed public URL (used for qr code)",
      required: false,
    },
    qr: {
      type: "boolean",
      description: "Display The QR code of public URL when available",
      required: false,
    },
    public: {
      type: "boolean",
      description: "Listen to all network interfaces",
      required: false,
    },
  },
  async run({ args }) {
    mergeHttpsOptions(args);
    const opts: Partial<ListenOptions & WatchOptions & DevServerOptions> = {
      ...args,
      port: args.port,
      hostname: args.host,
      clipboard: args.clipboard,
      open: args.open,
      baseURL: args.baseURL,
      name: args.name,
      qr: args.qr,
      publicURL: args.publicURL,
      public: args.public,
      https: args.https,
    };

    const entry =
      isAbsolute(args.entry) || args.entry.startsWith(".")
        ? args.entry
        : `./${args.entry}`;

    if (args.watch) {
      await listenAndWatch(entry, opts);
    } else {
      const devServer = await createDevServer(entry, opts);
      await listen(devServer.nodeListener, {
        ...opts,
        _entry: devServer._entry,
      });
      await devServer.reload(true);
    }
  },
});

export const runMain = () => _runMain(main);
